TDE:

1.  Transparent data encryption enables you to encrypt database data files or selected columns of data.
2.  Transparent Data Encryption (TDE) enables you to encrypt sensitive data that you store in tables and tablespaces.
3.  It also enables you to encrypt database backups.
4.  Transparent Data Encryption can be applied to individual columns or entire tablespaces.
5.  TDE helps protect data stored on media (also called data at rest) 
    in the event that the storage media or data file is stolen.

6.  To configure Transparent Data Encryption (TDE), you must be granted either the SYSTEM administrative privilege or
    the ADMINISTER KEY MANAGEMENT system privilege.

7.  Oracle Database uses authentication, authorization, and auditing mechanisms to secure data in the database,
    but not in the operating system data files where data is stored. To protect these data files, Oracle Database provides
    Transparent Data Encryption (TDE). TDE encrypts sensitive data stored in data files. To prevent unauthorized decryption,
    TDE stores the encryption keys in a security module that is external to the database. 

Configuration Step:

1.    Oracle recommends using the KEYSTORE_CONFIGURATION attribute of the TDE_CONFIGURATION initialization parameter
      after setting the WALLET_ROOT.
      WALLET_ROOT         ----> static parameter
      TDE_CONFIGURATION   ----> dynamic parameter

    SQL>    alter system set WALLET_ROOT="${ORACLE_BASE}/admin/${ORACLE_SID}/wallet" scope=spfile;
    SQL> shut immediate
    SQL> startup
    
    SQL>    alter system set TDE_CONFIGURATION="KEYSTORE_CONFIGURATION=FILE";

2.     Create the password protected key store

    SQL>    administer key management create keystore identified by oracledbwr;
    keystore altered.
    
    SQL>    administer key management create LOCAL auto_login keystore from keystore '/u02/app/oracle/admin/oradbwr/wallet/tde/'                    identified by oracledbwr;

            keystore altered.
    SQL>    select * from v$encryption_wallet;

3.   Setup the Master Encryption Key

    SQL>     administer key management set key using tag 'oracledbwr_Tablespace_TDE' force keystore identified by oracledbwr with backup using ‘TDE_backup’;

    SQL>    select * from v$encryption_wallet;
    SQL>    select key_id,tag,keystore_type,creation_time from v$encryption_keys;

4.    Online Encryption of Tablespace
      From 19c onwords no need go for Offline Encryption.This method creates a new datafile with encrypted data

      SQL>    alter tablespace users encryption online encrypt;
              Tablespace altered.

